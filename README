README
--------

This project runs a simple NodeJS application in Auto Scaling Group (ASG) with an Elastic Load Balancer attached.  The NodeJS application connects to a MySQL database to add/modify user' s age and email etc.  
Dynamic Automatic Scaling is also enabled which monitors the average CPU utilization against a defined threshold and scales accordingly once the threshold is exceeded.   

Pre-requisites:

1. Prepare private keys for access to EC2 instances

	Create a ‘private-key’ folder in the current working directory.  
	Under EC2 service in AWS console, under “Network and Security/Key Pairs”, download the private key to the ‘private-key’ folder.
	The filename must be terraform-key.pem and secure it with permission 600 as follow.  

	Note that this assumes that there is already a key pair created in the AWS console above.  Since there are 3 environments, there should be 3 sets of key pairs.  But for simplicity sake, in this demo we will use 	one common set of key pairs.  

	➜  Symbiosis_Project git:(main) ✗ ls -al private-key
	total 8
	drwxr-xr-x   3 desmondlim  staff    96 Apr 12 21:17 .
	drwxr-xr-x  19 desmondlim  staff   608 Apr 19 23:28 ..
	-rw-------@  1 desmondlim  staff  1674 Apr  2 23:16 terraform-key.pem

2. Prepare the password file for RDS database to use.  
	Create a file called secret.tfvars file and populate it with the below contents (recommended to manually type).  Replace XXXXXXXX with your own password (minimally 8 characters) for each environment.  

	➜  Symbiosis_Project git:(main) ✗ cat secret.tfvars
	db_username = "admin"
	db_password = {
 	 dev  = "XXXXXXXX"
  	 uat  = "XXXXXXXX"
  	 prod = "XXXXXXXX"
	}


Build the AWS Infrastructure:

0.  Clone the project folder locally.  Then ensure pre-requisites mentioned above are met.    

➜  test git clone https://github.com/dkelim1/Symbiosis_Project.git
Cloning into 'Symbiosis_Project'...
remote: Enumerating objects: 75, done.
remote: Counting objects: 100% (75/75), done.
remote: Compressing objects: 100% (45/45), done.
remote: Total 75 (delta 29), reused 69 (delta 23), pack-reused 0
Receiving objects: 100% (75/75), 40.18 KiB | 2.68 MiB/s, done.
Resolving deltas: 100% (29/29), done.
➜  test pwd
/Users/desmondlim/Documents/test
➜  test cd Symbiosis_Project
➜  Symbiosis_Project git:(main) pwd
/Users/desmondlim/Documents/test/Symbiosis_Project
➜  Symbiosis_Project git:(main) ls -l
total 232
drwxr-xr-x  4 desmondlim  staff    128 Apr 20 23:26 cloud_init
-rw-r--r--  1 desmondlim  staff    209 Apr 20 23:26 locals.tf
-rw-r--r--  1 desmondlim  staff  11487 Apr 20 23:26 main.tf
-rw-r--r--  1 desmondlim  staff   1485 Apr 20 23:26 module.tf
drwxr-xr-x  3 desmondlim  staff     96 Apr 20 23:26 modules
-rw-r--r--  1 desmondlim  staff    290 Apr 20 23:26 outputs.tf
-rw-r--r--  1 desmondlim  staff    158 Apr 20 23:26 terraform.tfstate
-rw-r--r--  1 desmondlim  staff  85395 Apr 20 23:26 terraform.tfstate.backup
drwxr-xr-x  5 desmondlim  staff    160 Apr 20 23:26 terraform.tfstate.d
-rw-r--r--  1 desmondlim  staff   3794 Apr 20 23:26 variables.tf


1. Initialize the terraform backend.  

➜  Symbiosis_Project git:(main) ✗ terraform init
Initializing modules...
- vars in modules/vars
Downloading registry.terraform.io/terraform-aws-modules/vpc/aws 3.0.0 for vpc...
- vpc in .terraform/modules/vpc

Initializing the backend...

Initializing provider plugins...
- Finding hashicorp/aws versions matching ">= 3.15.0, < 4.0.0"...
- Finding latest version of hashicorp/template...
- Installing hashicorp/aws v3.75.1...
- Installed hashicorp/aws v3.75.1 (signed by HashiCorp)
- Installing hashicorp/template v2.2.0...
- Installed hashicorp/template v2.2.0 (signed by HashiCorp)

Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.

2. List available workspace.  
➜  Symbiosis_Project git:(main) terraform workspace list
* default
  dev
  prod
  uat

3. Choose from dev, uat or prod workspace.  Do not use default workspace.    
➜  Symbiosis_Project git:(main) terraform workspace select dev
Switched to workspace "dev".

➜  Symbiosis_Project git:(main) ✗ terraform workspace show
dev


4. Optionally, validate the terraform scripts.  
➜  Symbiosis_Project git:(main) ✗ terraform validate
Success! The configuration is valid.

5. Dry run the creation of the infrastructure by executing terraform plan.  
➜  Symbiosis_Project git:(main) ✗ terraform plan -var-file=secret.tfvars

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create
 <= read (data resources)

Terraform will perform the following actions:

  # data.template_file.backend_cloud_init will be read during apply
  # (config refers to values not yet known)
 <= data "template_file" "backend_cloud_init"  {
      + id       = (known after apply)
      + rendered = (known after apply)
      + template = <<-EOT
            #!/bin/bash

            set -x
            yum update -y

…….
……..
………
………. Output truncated for brevity …………..


6. Execute terraform apply to deploy the AWS infrastructure.  
➜  Symbiosis_Project git:(main) ✗ terraform apply -var-file=secret.tfvars -auto-approve
…….
……..
………
………. Output truncated for brevity …………..

   + vars     = {
          + "DB_HOST"   = (known after apply)
          + "DB_NAME"   = "symbiosdb"
          + "DB_PASSWD" = (sensitive)
          + "DB_PORT"   = (known after apply)
          + "DB_USER"   = (sensitive)
        }
    }

  # aws_autoscaling_group.webapps_asg will be created
  + resource "aws_autoscaling_group" "webapps_asg" {
      + arn                       = (known after apply)
      + availability_zones        = (known after apply)
      + default_cooldown          = (known after apply)
      + desired_capacity          = 2
      + force_delete              = false
      + force_delete_warm_pool    = false
      + health_check_grace_period = 300
      + health_check_type         = "ELB"
      + id                        = (known after apply)
      + launch_configuration      = (known after apply)
      + load_balancers            = [
          + "webapps-dev-elb",
        ]
      + max_size                  = 4
      + metrics_granularity       = "1Minute"
      + min_size                  = 2
      + name                      = (known after apply)
      + name_prefix               = "symbios-webapps-dev-asg"
      + protect_from_scale_in     = false
      + service_linked_role_arn   = (known after apply)
      + vpc_zone_identifier       = (known after apply)
      + wait_for_capacity_timeout = "10m"

      + tag {
          + key                 = "Name"
          + propagate_at_launch = true
          + value               = "symbios-webapps-asg"
        }
    }


…….
……..
………
………. Output truncated for brevity …………..

aws_db_instance.mysql_rds: Provisioning with 'remote-exec'...
aws_db_instance.mysql_rds (remote-exec): (output suppressed due to sensitive value in config)
aws_db_instance.mysql_rds (remote-exec): (output suppressed due to sensitive value in config)
aws_db_instance.mysql_rds: Creation complete after 13m44s [id=mysql-rds-dev20220419154203539000000001]
data.template_file.backend_cloud_init: Reading...
data.template_file.backend_cloud_init: Read complete after 0s [id=bfd66e73793202064fe8059fbcfef0b5efec986a0f42f4a3fd9692e9543d1b39]
aws_launch_configuration.webapps_lc: Creating...
aws_launch_configuration.webapps_lc: Creation complete after 1s [id=symbios-webapps-dev-lc20220419155548257200000002]
aws_autoscaling_group.webapps_asg: Creating...
aws_autoscaling_group.webapps_asg: Still creating... [10s elapsed]
aws_autoscaling_group.webapps_asg: Still creating... [20s elapsed]
aws_autoscaling_group.webapps_asg: Still creating... [30s elapsed]
aws_autoscaling_group.webapps_asg: Still creating... [40s elapsed]
aws_autoscaling_group.webapps_asg: Still creating... [50s elapsed]
aws_autoscaling_group.webapps_asg: Still creating... [1m0s elapsed]
aws_autoscaling_group.webapps_asg: Creation complete after 1m9s [id=symbios-webapps-dev-asg20220419155548995200000003]

Apply complete! Resources: 31 added, 0 changed, 0 destroyed.

Outputs:

clb_dns_name = "webapps-dev-elb-1255140982.ap-southeast-1.elb.amazonaws.com"
rds_address = "mysql-rds-dev20220419154203539000000001.cqzincbdnrxl.ap-southeast-1.rds.amazonaws.com"


7. Explore the application by entering the URL under the above cls_dns_name in Chrome or IE.  

8. Destroy the AWS infrastructure by executing terraform destroy.  
	➜  Symbiosis_Project git:(main) ✗  terraform destroy  -var-file=secret.tfvars -auto-approve
module.vpc.aws_eip.nat[0]: Refreshing state... [id=eipalloc-0e2636d23da4cfa7d]
module.vpc.aws_vpc.this[0]: Refreshing state... [id=vpc-0c24ce0ad10462719]
module.vpc.aws_subnet.private[0]: Refreshing state... [id=subnet-0fec13c91e42142a3]
module.vpc.aws_subnet.private[1]: Refreshing state... [id=subnet-0625ca47de3056749]
module.vpc.aws_internet_gateway.this[0]: Refreshing state... [id=igw-01ce5afb8c70d6691]
module.vpc.aws_route_table.public[0]: Refreshing state... [id=rtb-023a741ad356a7baf]
module.vpc.aws_route_table.private[0]: Refreshing state... [id=rtb-0f51688f43329a58e]
module.vpc.aws_subnet.database[0]: Refreshing state... [id=subnet-0c3d7943a45d8d7d2]
module.vpc.aws_subnet.database[1]: Refreshing state... [id=subnet-0fd7aa66176357d17]
module.vpc.aws_subnet.public[0]: Refreshing state... [id=subnet-07fd5325910b8da57]
aws_security_group.elb_sg: Refreshing state... [id=sg-0b8a295e35b8e1973]
module.vpc.aws_subnet.public[1]: Refreshing state... [id=subnet-03698567597b11e13]
module.vpc.aws_route_table.database[0]: Refreshing state... [id=rtb-0090a78a0db922d02]
aws_security_group.bastion_host_sg: Refreshing state... [id=sg-00a26c79c19205eea]
module.vpc.aws_db_subnet_group.database[0]: Refreshing state... [id=symbiosis_vpc_dev]
module.vpc.aws_route.public_internet_gateway[0]: Refreshing state... [id=r-rtb-023a741ad356a7baf1080289494]
module.vpc.aws_route_table_association.private[0]: Refreshing state... [id=rtbassoc-09986f4d20a342785]
module.vpc.aws_route_table_association.private[1]: Refreshing state... [id=rtbassoc-0885438a6dc3b1135]
module.vpc.aws_route_table_association.database[1]: Refreshing state... [id=rtbassoc-0283ceda3e92119da]
module.vpc.aws_route_table_association.database[0]: Refreshing state... [id=rtbassoc-0b559843ac4f9b7bd]
module.vpc.aws_route_table_association.public[1]: Refreshing state... [id=rtbassoc-003654e7bec5170b4]
module.vpc.aws_route_table_association.public[0]: Refreshing state... [id=rtbassoc-003c45bb4cd7b2d25]
module.vpc.aws_nat_gateway.this[0]: Refreshing state... [id=nat-01b514772374c124a]
aws_security_group.apps_instance_sg: Refreshing state... [id=sg-00713317cc497fcb6]
module.vpc.aws_route.private_nat_gateway[0]: Refreshing state... [id=r-rtb-0f51688f43329a58e1080289494]
aws_security_group.mysqldb_sg: Refreshing state... [id=sg-04f572234e7374b30]
aws_elb.webapps_elb: Refreshing state... [id=webapps-dev-elb]
aws_instance.bastion_host: Refreshing state... [id=i-02f64527c2a0ba050]
aws_db_instance.mysql_rds: Refreshing state... [id=mysql-rds-dev20220419154203539000000001]
aws_launch_configuration.webapps_lc: Refreshing state... [id=symbios-webapps-dev-lc20220419155548257200000002]
aws_autoscaling_group.webapps_asg: Refreshing state... [id=symbios-webapps-dev-asg20220419155548995200000003]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  - destroy

Terraform will perform the following actions:

  # aws_autoscaling_group.webapps_asg will be destroyed
  - resource "aws_autoscaling_group" "webapps_asg" {
      - arn                       = "arn:aws:autoscaling:ap-southeast-1:500295128231:autoScalingGroup:2677cd68-767a-48ae-9a60-f1a5b74e46b1:autoScalingGroupName/symbios-webapps-dev-asg20220419155548995200000003" -> null
      - availability_zones        = [
          - "ap-southeast-1a",
          - "ap-southeast-1b",
        ] -> null
      - capacity_rebalance        = false -> null
      - default_cooldown          = 300 -> null
      - desired_capacity          = 2 -> null
      - enabled_metrics           = [] -> null
      - force_delete              = false -> null
      - force_delete_warm_pool    = false -> null
      - health_check_grace_period = 300 -> null
      - health_check_type         = "ELB" -> null
      - id                        = "symbios-webapps-dev-asg20220419155548995200000003" -> null
…….
……..
………
………. Output truncated for brevity …………..


Future updates:

Note that the following changes will be incorporated in future releases.  

3. Create a CICD workflow to deploy the above application to production in an automated way. There are 3 environments - DEV, UAT, Production. Choose a tool of your choice.
4. Create an API to expose data saved in the database via services of your choosing, making sure the APIs are secure.
 
5. How would you monitor and what metrics would you use
   The monitoring will be done from the CloudWatch interface with alarms created when certain conditions are met.  

   The metrics to monitor are :- 